beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha,  rate = beta1)
f2 = dgamma(x, shape = alpha,  rate = beta2)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
param_change <- max(abs(p1 - p1_old), abs(beta1 - beta1_old), abs(beta2 - beta2_old))
if (param_change < tolerance) {
cat("Converged at iteration:", iter, "\n")
break
}
}
# initialize parameters
set p1, p2, beta1, beta2 to an initial value
# initialize parameters
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
# generate for loop to iterate until convergence or the max nos of iterations
for (iter in 1:max_iter) {
# store parameteres for comparison
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha,  rate = beta1)
f2 = dgamma(x, shape = alpha,  rate = beta2)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (20 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (15 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
param_change <- max(abs(p1 - p1_old), abs(beta1 - beta1_old), abs(beta2 - beta2_old))
if (param_change < tolerance) {
cat("Converged at iteration:", iter, "\n")
break
}
}
# initialize parameters
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
alpha1 = 20
alpha2 = 15
# generate for loop to iterate until convergence or the max nos of iterations
for (iter in 1:max_iter) {
# store parameteres for comparison
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha1,  rate = beta1)
f2 = dgamma(x, shape = alpha2,  rate = beta2)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha1 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha2 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
param_change <- max(abs(p1 - p1_old), abs(beta1 - beta1_old), abs(beta2 - beta2_old))
if (param_change < tolerance) {
cat("Converged at iteration:", iter, "\n")
break
}
}
alpha1
beta1
x
dist
# nos of samples for each distribution
n1 = rbinom(1, 200, 0.4)
n2 = 200 - n1
# generating samples
dist1 = rgamma(n1, shape = 20, scale = 1/10)
dist2 = rgamma(n1, shape = 15, scale = 1/25)
dist = c(dist1, dist2)
hist(dist)
dist
# initialize parameters
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
alpha1 = 20
alpha2 = 15
# generate for loop to iterate until convergence or the max nos of iterations
for (iter in 1:max_iter) {
# store parameteres for comparison
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha1,  rate = beta1)
f2 = dgamma(x, shape = alpha2,  rate = beta2)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha1 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha2 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
param_change <- max(abs(p1 - p1_old), abs(beta1 - beta1_old), abs(beta2 - beta2_old))
if (param_change < tolerance) {
cat("Converged at iteration:", iter, "\n")
break
}
}
(p1 * f1) + (p2 * f2)
f1
x
dgamma(x, shape = alpha1,  rate = beta1)
rgamma(x, shape = alpha1,  rate = beta1)
x
alpha1
beta1
beta1 = 1
# initialize parameters
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
alpha1 = 20
alpha2 = 15
# generate for loop to iterate until convergence or the max nos of iterations
for (iter in 1:max_iter) {
# store parameteres for comparison
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha1,  rate = beta1)
f2 = dgamma(x, shape = alpha2,  rate = beta2)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha1 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha2 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
param_change = max(abs(p1 - p1_old), abs(beta1 - beta1_old), abs(beta2 - beta2_old))
if (param_change < tolerance) {
cat("Converged at iteration:", iter, "\n")
break
}
}
f1 = dgamma(x, shape = alpha1,  rate = beta1)
f1
beta1
# initialize parameters
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
alpha1 = 20
alpha2 = 15
# generate for loop to iterate until convergence or the max nos of iterations
for (iter in 1:max_iter) {
# store parameteres for comparison
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha1,  rate = beta1_old)
f2 = dgamma(x, shape = alpha2,  rate = beta2_old)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha1 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha2 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
param_change = max(abs(p1 - p1_old), abs(beta1 - beta1_old), abs(beta2 - beta2_old))
if (param_change < tolerance) {
cat("Converged at iteration:", iter, "\n")
break
}
}
beta1_old
f1
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
alpha1 = 20
alpha2 = 15
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha1,  rate = beta1_old)
f2 = dgamma(x, shape = alpha2,  rate = beta2_old)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha1 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha2 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
beta2
f1
# initialize parameters
p1 = 0.5
p2 = 0.5
beta1 = 1
beta2 = 1
max_iter = 100
tolerance = 0.001
x = dist
alpha1 = 20
alpha2 = 15
# generate for loop to iterate until convergence or the max nos of iterations
for (iter in 1:max_iter) {
# store parameteres for comparison
p1_old = p1
beta1_old = beta1
beta2_old = beta2
# Expectation step: calculate p_i1^(c) = p(z_i = 1|x_i, beta1, beta2)
f1 = dgamma(x, shape = alpha1,  rate = beta1_old)
f2 = dgamma(x, shape = alpha2,  rate = beta2_old)
p_i1 = (p1 * f1) / ((p1 * f1) + (p2 * f2))
p_i1_old = p_i1
# Maximization step: update p1, p2, beta1, and beta2
p1 = mean(p_i1)
p2 = 1 - p1
beta1 = (alpha1 * sum(1 - p_i1)) / (sum(p_i1 * x))
beta2 = (alpha2 * sum(1 - p_i1)) / (sum((1 - p_i1) * x))
# check for convergence
if (p_i1 != p_i1_old) {
cat("Converged at iteration:", iter, "\n")
break
}
}
p_i1
p_i1_old
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(faraway)
library(ggplot2)
library(lme4)
library(gridExtra)
library(sm)
library(pbkrtest)
data(gala, package = "faraway")
gala = gala[,-2]
head(gala)
gala_pois = glm(Species ~ ., family = poisson, data = gala)
sumary(gala_pois)$coef
sumary(gala_pois)
y = gala$Species
mu = y
eta = log(mu)
d_eta = 1/mu
v = mu
w = mu
z = eta + (y - mu)*mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)*mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
sumary(gala_pois)$coef
coef(lmod)
y = gala$Species
mu = y
eta = log(mu)
d_eta = 1/mu
v = mu
w = mu
z = eta + (y - mu)/mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)*mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
# sumary(gala_pois)$coef
y = gala$Species
mu = y
eta = log(mu)
d_eta = 1/mu
v = mu
w = mu
z = eta + (y - mu)/mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
# sumary(gala_pois)$coef
gala_pois = glm(Species ~ ., family = poisson, data = gala)
sumary(gala_pois)
y = gala$Species
mu = y
eta = log(mu)
d_eta = 1/mu
v = mu
w = mu
z = eta + (y - mu)/mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
# sumary(gala_pois)$coef
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
# first iteration
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
# second iteration
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
# third iteration
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
summary(lmod)
sumary(gala_pois)
coef(lmod)
data(denim)
denim <- denim[-which(denim$waste == max(denim$waste)),] #removing 2 outliers
denim <- denim[-which(denim$waste == max(denim$waste)),]
ggplot(aes(x = supplier, y = waste), data = denim) +
geom_point()
ggplot(aes(x = supplier, y = waste), data = denim) +
geom_boxplot()
lmod = lm(waste ~ supplier, denim)
drop1(lmod, test = "F")
lmod
summary(lmod)
lmod = lm(waste ~ supplier, denim)
coef(lmod)
summary(lmod)
lmod = aov(waste ~ supplier, denim)
summary(lmod)
lmod = aov(waste ~ supplier, denim)
coef(lmod)
lmod = aov(waste ~ supplier, denim)
lmod
coef(lmod)
lmod = aov(waste ~ supplier, denim)
summary(lmod)
coef(lmod)
rmod = lmer(waste ~ 1+(1|supplier), denim, REML = TRUE)
summary(rmod)
sigma2_alpha = 2.391^2 # var of random intercept
sigma2 = 6.107^2 # var of fixed intercept
corr = sigma2_alpha/(sigma2_alpha + sigma2)
corr
lmod = lm(waste ~ supplier, denim)
summary(lmod)
lmod = lm(waste ~ supplier, denim)
drop1(lmod, test = "F")
lmod = lm(waste ~ supplier, denim)
summary(lmod)
coef(lmod)
lmod = lm(waste ~ supplier, denim)
summary(lmod)
nlmod = lm(waste ~ 1, denim)
mmodstar = lmer(waste ~ 1 + (1|supplier), denim, REML = FALSE)
lrt = as.numeric(2*(logLik(mmodstar) - logLik(nlmod)))
set.seed(23)
lrt_star = numeric(1000)
for (i in 1:1000) {
rwaste = unlist(simulate(nlmod))
nlmodr = lm(rwaste ~ w, denim)
mmodr = lmer(rwaste ~ 1 + (1|supplier), denim, REML = FALSE)
lrt_star[i] = 2*(logLik(mmodr) - logLik(nlmodr))
}
set.seed(23)
lrt_star = numeric(1000)
for (i in 1:1000) {
rwaste = unlist(simulate(nlmod))
nlmodr = lm(rwaste ~ 1, denim)
mmodr = lmer(rwaste ~ 1 + (1|supplier), denim, REML = FALSE)
lrt_star[i] = 2*(logLik(mmodr) - logLik(nlmodr))
}
mean(lrt_star > lrt)
# dont reject if > p - can remove random effect
set.seed(23)
lrt_star = numeric(1000)
for (i in 1:1000) {
rwaste = unlist(simulate(nlmod))
nlmodr = lm(rwaste ~ 1, denim)
mmodr = lmer(rwaste ~ 1 + (1|supplier), denim, REML = FALSE)
lrt_star[i] = 2*(logLik(mmodr) - logLik(nlmodr))
}
mean(lrt_star > lrt)
# dont reject if > p - can remove random effect
data(ratdrink, package = "faraway")
ggplot(aes(x = weeks, y = wt), data = ratdrink) +
geom_point() +
facet_wrap(~treat)
ml = lmer(wt ~ weeks * treat + (weeks | subject), ratdrink)
summary(ml)
exp(52.88)
ml_red = lmer(wt ~ weeks + (weeks | subject), ratdrink)
anova(ml_red, ml)
fit_val = fitted(ml)
res_val = resid(ml)
plot(fit_val, res_val)
qqnorm(resid(ml))
confint(ml)
ml
head(ratdrink)
data("teengamb")
with(teengamb, sm.regression(gamble, income, h = h.select(gamble, income)))
plot(teengamb$gamble ~ teengamb$income, col = gray(0.75), cex.lab = 1.5)
spline_gamb = smooth.spline(teengamb$income, teengamb$gamble)
lines(spline_gamb, lty = 2)
spline_gamb$df
plot(teengamb$gamble ~ teengamb$income, col = gray(0.75), cex.lab = 1.5)
spline_gamb_df = smooth.spline(teengamb$income, teengamb$gamble, df = 5)
lines(spline_gamb_df, lty = 2)
data(gala, package = "faraway")
gala = gala[,-2]
head(gala)
gala_pois = glm(Species ~ ., family = poisson, data = gala)
sumary(gala_pois)
y = gala$Species
mu = y
eta = log(mu)
d_eta = 1/mu
v = mu
w = mu
z = eta + (y - mu)/mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
sumary(gala_pois)$coef
eta = lmod$fit
mu = exp(eta)
z = eta + (y - mu)/mu
w = mu
lmod = lm(z ~ Area + Elevation + Nearest + Scruz + Adjacent, weights = w, gala)
coef(lmod)
dev = 2*sum(y * log(y) - y * eta - (y - exp(eta)))
dev
coef(gala_pois)
